rm(list = ls())
## working directory assumed to be inside a GitHub folder on Mac Desktop
setwd("~/Desktop/GitHub/data_files/T1D_single_cell/")

##load packages 

library(circlize)
library(plyr)
library(reshape2)
library(gtools)
library(igraph)
library(reshape)

#### load annotatiopn data into r

anno <- read.delim("anno_T1D_single_cell_libs.txt", header=T, stringsAsFactors=FALSE)
row.names(anno) = anno$libID

## load TCRs

tcrs.full = read.delim("TCRs_T1D_single_cell.txt", stringsAsFactors=FALSE)

## subset data

anno.sub = anno

## combine three collections form the sample patiuent into one (P91-3, P91-6 and P91-15)
anno.sub = subset(anno.sub, !project == "P91-2") # remove project P91-2- not included in analyses
anno.sub$project = gsub("P91-6", "P91-3", anno.sub$project)
anno.sub$project = gsub("P91-15", "P91-3", anno.sub$project)

anno.p91.3 = subset(anno.sub, project == "P91-3") # T1D2
anno.p91.10 = subset(anno.sub, project == "P91-10") # T1D4
anno.p91.11 = subset(anno.sub, project == "P91-11") # T1D5
anno.p91.7 = subset(anno.sub, project == "P91-7") #HC2
anno.p91.9 = subset(anno.sub, project == "P91-9") #HC3
anno.p91.14 = subset(anno.sub, project == "P91-14") #HC5

## create new libID for ordering samples in circos plot

anno.p91.3$new.libID = seq(1, nrow(anno.p91.3))
anno.p91.10$new.libID = seq(100, 99+nrow(anno.p91.10), by = 1)
anno.p91.11$new.libID = seq(200, 199+nrow(anno.p91.11))
anno.p91.7$new.libID = seq(300, 299+nrow(anno.p91.7))
anno.p91.9$new.libID = seq(400, 399+nrow(anno.p91.9))
anno.p91.14$new.libID = seq(500, 499+nrow(anno.p91.14))

vara = rbind(anno.p91.3, anno.p91.10, anno.p91.11, anno.p91.7, anno.p91.9, anno.p91.14)
anno.sub = data.frame(vara[,1:10], vara[,ncol(vara)])
colnames(anno.sub)[ncol(anno.sub)] = c("new.libID")

anno.tcrs = merge(tcrs.full, anno.sub, by = "libID")
anno.tcrs$libID = NULL
colnames(anno.tcrs)[ncol(anno.tcrs)] = c("libID")
tcrs = data.frame(libID = as.character(anno.tcrs$libID), V.gene = as.character(anno.tcrs$V.gene), J.gene = as.character(anno.tcrs$J.gene), junction = as.character(anno.tcrs$junction), status = as.character(anno.tcrs$Status), project = as.character(anno.tcrs$project), stringsAsFactors = F)

#### start here to prepare circos plots
 
sub = tcrs

##### trim TCR sequences
melt.tcrs = sub[,]
melt.tcrs = melt.tcrs[,-3]
colnames(melt.tcrs) = c("libID", "V_gene", "junction")
melt.tcrs = melt.tcrs[,1:3]
melt.tcrs$junction = as.character(melt.tcrs$junction)

###### combine TRAV as origing and TRBV as deistination using junction as key
melt.join = merge(melt.tcrs, melt.tcrs, by = "junction", stringsAsFactors = F)
melt.join$junction = as.character(melt.join$junction)

melt.join = subset(melt.join, !melt.join$libID.x== melt.join$libID.y)

##### limit variables

melt.join = melt.join[c(1,2,4)]
colnames(melt.join) = c("junction", "orig", "dest")

##### remove duplicated TCR records including libID
dup = ifelse(melt.join$orig == melt.join$dest, "dup", "other")
melt.dup = data.frame(melt.join, dup)

mju = melt.join

#### tabulate repeated pairings without libID and create df2
table.mju= aggregate(list(numdup=rep(1,nrow(mju[2:ncol(mju)]))), mju[2:ncol(mju)], length)
table.mju$orig = as.character(table.mju$orig)
table.mju$dest = as.character(table.mju$dest)
table.set = subset(table.mju, table.mju$orig %in% sub$libID)

## remove duplicated combinations of orig and dest http://stackoverflow.com/questions/24194879/all-combinations-of-two-and-remove-if-they-are-same-in-r

t = table.set
v1 = t$orig
v2 = t$dest
gg<-graph.data.frame(expand.grid(v1,v2), directed=F)
ss<-igraph::simplify(gg)
zz = data.frame(get.edgelist(ss))
colnames(zz) = c("orig", "dest")

t.sub = subset(t, t$orig %in% zz$orig & t$dest %in% zz$dest)

table.sub = t.sub

df2 = data.frame(orig = as.character(table.sub$orig), dest = as.character(table.sub$dest), m = as.numeric(table.sub$numdup))

### create m from df2

m = cast(df2, orig~dest)
m[is.na(m)] = 0

row.names(m) = m[,1]
m = m[,-1]

m = m[order(row.names(m)),]
m = data.frame(m)
m = as.matrix(m)

## create reference data.frame (df1) with for details on each sample. Need to sort libIDs alphanumerically

## create reference data.frame (df1) with for details on each sample. Need to sort libIDs alphanumerically

#tcrs.sub = subset(tcrs, tcrs$libID %in% vara$libID)
tcrs.sub = tcrs

libs = data.frame(unique(tcrs.sub$libID), stringsAsFactors = F)
colnames(libs)[1] = c("libID")

#
color = ifelse(libs$libID %in% anno.p91.3$new.libID, "186,228,188",	
			ifelse(libs$libID %in% anno.p91.10$new.libID, "123,204,196",	
				ifelse(libs$libID %in% anno.p91.11$new.libID, "43,140,190",	
					ifelse(libs$libID %in% anno.p91.7$new.libID, "251,180,185",	
						ifelse(libs$libID %in% anno.p91.9$new.libID, "247,104,161",	
							ifelse(libs$libID %in% anno.p91.14$new.libID, "174,1,126", "black"))))))
##

df1 = data.frame(orig = libs[,1], color = color)

lib.order = paste(sort(as.integer(levels(df1$orig))))

df1$orig <- factor(df1$orig, levels= lib.order)
df1 = df1[(!duplicated(df1$orig)),]
df1 = df1[order(df1$orig),]

####### 

df1$order = seq(1:nrow(df1))
row.names(df1) = seq(1:nrow(df1))

##sort order of data.frame and matrix by libID for plotting in circos. Need to uses alphanumeric sorting.
##
##define ranges of circos sectors and their colors (both of the sectors and the links)
##

df1$xmin <- 0
df1$xmax = nrow(df1)

n<-nrow(df1)

#df1$sum1 <- rowSums(m)
df1$sum = nrow(m) + ncol(m)
df1$sum2 <- numeric(n)

rgb = as.character(df1$color)
df1$color = rgb

df1 <- cbind(df1, matrix(as.numeric(unlist(strsplit(df1$color,","))),nrow=n, byrow=TRUE) )
names(df1)[ncol(df1)-2:0]<-c("r","g","b")
df1$rcol<-rgb(df1$r, df1$g, df1$b, max = 255)
df1$lcol<-rgb(df1$r, df1$g, df1$b, alpha=200, max = 255)

#######
dev.off()
quartz(width=7,height=7,dpi=72)  ### open plotting window

par(mar=rep(0,4))
circos.clear()

#basic circos graphic parameters
circos.par(cell.padding=c(0,0,0,0), track.margin=c(0,0.15), start.degree = 90, gap.degree =0)

#sector details
circos.initialize(factors = df1$orig, xlim = cbind(df1$xmin, df1$xmax))

#plot sectors
circos.trackPlotRegion(ylim = c(0, 1), factors = df1$orig, track.height=0.1,
 #panel.fun for each sector
 panel.fun = function(x, y) {
   #select details of current sector
   name = get.cell.meta.data("sector.index")
   i = get.cell.meta.data("sector.numeric.index")
   xlim = get.cell.meta.data("xlim")
   ylim = get.cell.meta.data("ylim")

   #plot labels
   circos.text(x=mean(xlim), y=2.2, labels=name, direction = "arc", cex=0.002)

   #plot main sector
   circos.rect(xleft=xlim[1], ybottom=ylim[1], xright=xlim[2], ytop=ylim[2], col = df1$rcol[i], border=df1$rcol[i])

   #blank in part of main sector
   #circos.rect(xleft=xlim[1], ybottom=ylim[1], xright=xlim[2]-rowSums(m)[i], ytop=ylim[1]+0.3, col = "white", border = "white")

   #white line all the way around
   #circos.rect(xleft=xlim[1], ybottom=0.3, xright=xlim[2], ytop=0.32, col = "white", border = "white")

   #plot axis
   circos.axis(labels.cex=0.006, major.at=seq(from=0,to=floor(df1$xmax)[i],by=500), 
                                 labels.away.percentage = 0.15)
})


##
##plot links
##
#add sum values to df1, marking the x-position of the first links out (sum1) and in (sum2). Updated for further links in loop below.
df1$sum1 <- nrow(m)
#df1$sum1 <- colSums(m)
df1$sum2 <- numeric(n)

#create a data.frame of matrix sorted by element size, to allow largest plotted first

### load df2
df2.levs = mixedsort(df2$orig)
df2.levs = as.character(df2.levs)

df2$orig = as.character(df2$orig)
df2$dest = as.character(df2$dest)
df2 = df2[order(df2$orig),]
#df2 = df2[match(df2.levs, df2$orig),]

########plot links
for(k in 1:nrow(df2)){
  #i,j reference of flow matrix
  i<-match(df2$orig[k],df1$orig)
  j<-match(df2$dest[k],df1$orig)
#j<-match(df2$dest[k],colnames(m))

  #plot link
  circos.link(sector.index1=df1$orig[i], point1=c(df1$sum1[i]),
	sector.index2=df1$orig[j], point2=c(df1$sum1[j]),
		col = df1$lcol[i], rou1=0.74, rou2=0.75, lwd = (df2$m[k]*1.5))
		
		
  #update sum1 and sum2 for use when plotting the next link
  #df1$sum1[i] = df1$sum1[i] + abs(m[i, j])
  #df1$sum2[j] = df1$sum2[j] + abs(m[i, j])
}

legend("bottomright", unique(unique(anno.sub$PID)), lwd = 5, col = c("#bae4bc","#7bccc4",	"#2b8cbe",	"#fbb4b9",	"#f768a1",	"#ae017e"), cex = 1, bty = "n");


##########
